[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
buildscript {
	repositories {
		gradlePluginPortal()
	}
	dependencies {
// using jpackage only works if the JDK version is 14 or higher.
// your JAVA_HOME environment variable may also need to be a JDK with version 14 or higher.
		classpath "org.beryx:badass-runtime-plugin:1.13.0"
		if(enableGraalNative == 'true') {
			classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
		}

	}
}
apply plugin: 'org.beryx.runtime'

import proguard.gradle.ProGuardTask

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
mainClassName = 'com.github.yellowstonegames.lwjgl3.Lwjgl3Launcher'
eclipse.project.name = appName + '-lwjgl3'
sourceCompatibility = 11
java.targetCompatibility = JavaVersion.VERSION_11

dependencies {
//	implementation("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion") {
//		exclude group: 'org.lwjgl', module: 'lwjgl-openal' //// only removes audio
//		exclude group: 'org.jcraft', module: 'jorbis' // removes audio
//		exclude group: 'com.badlogicgames.jlayer', module: 'jlayer'
//	}
	implementation "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
	implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
	implementation project(':core')

//	implementation "com.badlogicgames.gdx:gdx-lwjgl3-angle:$gdxVersion"
}

def jarName = "${appName}-${version}.jar"
def os = System.properties['os.name'].toLowerCase()

run {
	workingDir = rootProject.file('assets').path
	setIgnoreExitValue(true)
}

jar {
	def buildDirectory = project.layout.buildDirectory.asFile.get().absolutePath

// sets the name of the .jar file this produces to the name of the game or app.
	archiveFileName.set(jarName)
// using 'lib' instead of the default 'libs' appears to be needed by jpackageimage.
	destinationDirectory = file("$buildDirectory/lib")
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
	dependsOn configurations.runtimeClasspath
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
	exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
	dependencies {
		exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
	}
// setting the manifest makes the JAR runnable.
	manifest {
		attributes 'Main-Class': project.mainClassName
	}
// this last step may help on some OSes that need extra instruction to make runnable JARs.
	doLast {
		file(archiveFile).setExecutable(true, false)
	}
}

tasks.register('proguard', ProGuardTask) {
	outputs.upToDateWhen { false }
	configuration 'proguard-rules.pro'
	//printmapping 'build/lib/out.map'
	var buildDirectory = project.layout.buildDirectory.asFile.get().absolutePath

	if (System.getProperty('java.version').startsWith('1.')) {
		libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
	} else {
		libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
	}
	injars(file("$buildDirectory/lib/${jarName}"))

	outjars "$buildDirectory/lib/${appName}.jar"
}

proguard.dependsOn jar

tasks.jpackageImage.doNotTrackState("This task reads and writes to the build folder.")
runtime {
	options.set(['--strip-debug',
				 '--compress', '2',
				 '--no-header-files',
				 '--no-man-pages',
				 '--strip-native-commands',
				 '--vm', 'server'])
// you could very easily need more modules than this one.
// use the lwjgl3:suggestModules task to see which modules may be needed.
	modules.set([
			'jdk.unsupported'
	])
	distDir.set(file(project.layout.buildDirectory))
	jpackage {
		imageName = appName
// you can set this to false if you want to build an installer, or keep it as true to build just an app.
		skipInstaller = true
// this may need to be set to a different path if your JAVA_HOME points to a low JDK version.
		jpackageHome = javaHome.getOrElse("")
		mainJar = jarName
		if (os.contains('win')) {
			imageOptions = ["--icon", "../assets/images/icons/logo.ico"]
		} else if (os.contains('nix') || os.contains('nux') || os.contains('bsd')) {
			imageOptions = ["--icon", "../assets/images/icons/logo.png"]
		} else if (os.contains('mac')) {
			imageOptions = ["--icon", "../assets/images/icons/logo.icns", "--java-options", "\"-XstartOnFirstThread\""]
		}
	}
}

// Equivalent to the jar task; here for compatibility with gdx-setup.
tasks.register('dist') {
	dependsOn['jar']
}

if(enableGraalNative == 'true') {
	apply from: file("nativeimage.gradle")
}
