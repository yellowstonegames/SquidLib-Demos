apply plugin: 'java-library'
apply plugin: 'application'

buildscript {
  repositories {
    gradlePluginPortal()
  }
  dependencies {
    if(enableGraalNative == 'true') {
      classpath "org.graalvm.buildtools.native:org.graalvm.buildtools.native.gradle.plugin:0.9.28"
    }
  }
}

import proguard.gradle.ProGuardTask

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.resources.srcDirs += [ rootProject.file('assets').path ]
java.sourceCompatibility = 1.8
mainClassName = 'com.squidpony.samples.lwjgl3.Lwjgl3Launcher'
eclipse.project.name = appName + '-desktop'
sourceSets.main.java.srcDirs = [ "src/main/java/" ]

dependencies {
  implementation("com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion") {
    exclude group: 'org.lwjgl', module: 'lwjgl-openal' //// only removes audio
    exclude group: 'org.jcraft', module: 'jorbis' // removes audio
    exclude group: 'com.badlogicgames.jlayer', module: 'jlayer'
  }
//  api "com.badlogicgames.gdx:gdx-lwjgl3-angle:$gdxVersion" //// not sure if this is needed.
  implementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
  implementation "com.github.SquidPony.SquidLib:squidlib:$squidLibVersion"
  implementation "com.github.SquidPony.SquidLib:squidlib-util:$squidLibVersion"
  implementation "com.github.tommyettinger:regexodus:$regExodusVersion"
}

import org.gradle.internal.os.OperatingSystem

run {
  workingDir = rootProject.file('assets').path
  setIgnoreExitValue(true)

  if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
    // Required to run LWJGL3 Java apps on MacOS
    jvmArgs += "-XstartOnFirstThread"
  }
}

def jarName = "${appName}-${version}.jar"

jar {
  def buildDirectory = project.layout.buildDirectory.asFile.get().absolutePath

// sets the name of the .jar file this produces to the name of the game or app.
  archiveFileName.set(jarName)
// using 'lib' instead of the default 'libs' appears to be needed by jpackageimage.
  destinationDirectory = file("$buildDirectory/lib")
// the duplicatesStrategy matters starting in Gradle 7.0; this setting works.
  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
  dependsOn configurations.runtimeClasspath
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
// these "exclude" lines remove some unnecessary duplicate files in the output JAR.
  exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
  dependencies {
    exclude('META-INF/INDEX.LIST', 'META-INF/maven/**')
  }
// setting the manifest makes the JAR runnable.
  manifest {
    attributes 'Main-Class': project.mainClassName
  }
// this last step may help on some OSes that need extra instruction to make runnable JARs.
  doLast {
    file(archiveFile).setExecutable(true, false)
  }
}

tasks.register('proguard', ProGuardTask) {
  outputs.upToDateWhen { false }
  configuration 'proguard-rules.pro'
  //printmapping 'build/lib/out.map'
  var buildDirectory = project.layout.buildDirectory.asFile.get().absolutePath

  if (System.getProperty('java.version').startsWith('1.')) {
    libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
  } else {
    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
  }
  injars(file("$buildDirectory/lib/${jarName}"))

  outjars "$buildDirectory/lib/${appName}.jar"
}

proguard.dependsOn jar

// Equivalent to the jar task; here for compatibility with gdx-setup.
tasks.register('dist') {
  dependsOn 'jar'
}

if(enableGraalNative == 'true') {
  apply from: file("nativeimage.gradle")
}
